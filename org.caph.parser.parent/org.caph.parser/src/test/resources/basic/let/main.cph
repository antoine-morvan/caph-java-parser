-- This example shows how to use the "let ... in" construct to break computations in smaller parts
-- (and also to share results of a computation)

-- Expected input: 1 3 6 10 5
-- Expected output: 6 42 156 420 110

actor foo ()
  in (a:signed<10>)
  out (c:signed<10>)
rules a -> c
|  v -> let x = (v*2:signed<10>) in let y = x+1 in (x*y:signed<10>)
;

stream i:signed<10> from "sample.txt";
stream o:signed<10> to "result.txt";

net o = foo i;
