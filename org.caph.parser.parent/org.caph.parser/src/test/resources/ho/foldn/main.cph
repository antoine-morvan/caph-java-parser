-- Another example of user-defined higher order actor.
-- The [ffoldn] actor takes a stream of values and "folds" it applying a reduction fonction [f]
-- to each subsequence of [n] values. Formally : 
--   ffoldn(n,f,z) : x11 x12 ... x1n x21 ... x2n ... = y1 y2 ...
--   where yi = f (f (f (f z xi1) xi2) ... xin)
-- For ex: ffoldn(4,+,0) : 1 2 3 4 5 6 7 8 9 10 11 12 ... = (1+2+3+4) (5+6+7+8) (9+10+11+12) ... = 10 26 42 ...
--     or: ffoldn(3,*,1) : 1 2 3 4 5 6 7 8 9 ... = (1*2*3) (4*5*6) (7*8*9) ... = 6 120 504
-- 2016-05-26, JS

-- The actor itself

actor ffoldn (n: int, f:$t*$t->$t, z:$t)
  in (i:$t)
 out (o:$t)
var acc: $t = z
var k : int = 0
rules
| i:x when k=n -> (o:acc, acc:f(z,x), k:1)
| i:x          -> (acc:f(acc,x), k:k+1)
;

-- Two examples of reduction functions

function add (x,y) = x+y : signed<8> * signed<8> -> signed<8>;
function mult (x,y) = x*y : unsigned<16> * unsigned<16> -> unsigned<16>;

stream i1:signed<8> from "sample1.txt";
stream o1:signed<8> to "result1.txt";
stream i2:unsigned<16> from "sample2.txt";
stream o2:unsigned<16> to "result2.txt";

net o1 = ffoldn (4,add,0) i1;   -- as given in the example above
net o2 = ffoldn (3,mult,1) i2;  -- as given in the example above
