grammar org.caph.parser.Caph hidden(WS, SL_COMMENT, INCLUDE)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate caph "http://www.caph.org/parser/Caph"

Model:
	declarations+=Declaration*;

Declaration: TypeDeclaration ';'
	| ValDeclaration ';'
	| IODeclaration ';'
	| ActorDeclaration ';'
	| NetDeclaration ';'
	| PragmaDeclaration
;



/* ****************************************************************
   **		TYPE Decls
   **************************************************************** */

TypeDeclaration: 'type';

/* ****************************************************************
   **		VAL Decls
   **************************************************************** */

ValDeclaration: 'val';

/* ****************************************************************
   **		IO Decls
   **************************************************************** */

IODeclaration: 'io';

/* ****************************************************************
   **		ACTOR Decls
   **************************************************************** */

ActorDeclaration: 'actor' ID ActorInterface ActorBody;

ActorInterface: ('(' parameters=ActorParameters ')')? 'in' '(' ins=ActorPorts ')' 'out' '(' outs=ActorPorts ')';

ActorParameters: ActorParameter (',' ActorParameters)?;
ActorParameter: ID ':' ObjectType;

ActorPorts: ActorPort (',' ActorPorts)?;
ActorPort: ID ':' ObjectType;

ActorBody: STRING; // TODO



/* ****************************************************************
   **		NET Decls
   **************************************************************** */

NetDeclaration: 'net';

/* ****************************************************************
   **		PRAGMA Decls
   **************************************************************** */

PragmaDeclaration: '#pragma' id=ID ('(' args+=ID (',' args+=ID)* ')')?;

/* ****************************************************************
   **		Expressions
   **************************************************************** */


/* ****************************************************************
   **		Types
   **************************************************************** */

ObjectType: Type;
Type: TypeProduct | TypeProduct '->' Type;

TypeProduct: NamedType ('*' NamedType)*;

NamedType:
	ArrayType (ID ('[' Size ']')?)?
;

ArrayType: SimpleType ('array'  '[' Size ']'  ('[' Size ']')? )?;

SimpleType:
	'signed' '<' Size '>'
	| 'unsigned' '<' Size '>'
	| 'int' ('<' ( Sign ',')? Size '>')?
	| TYPEVAR
//	| '(' Type ')' // XXX

	// TODO other
;

Sign: '_signed' | '_unsigned';

Size: INTCONST | SIZEVAR;


/* ****************************************************************
   **		TERMINALS
   **************************************************************** */

/* terminal */ VAR: ID;
/* terminal */ ATTR: ID;

terminal INTCONST returns ecore::EInt: ('-')? DIGIT+;
terminal FIXINTCONST: (RADIX)? DIGIT+;
terminal FLOATCONST returns ecore::EFloat: ('-')? DIGIT+ ('.' DIGIT*)? (("e"|"E")("+"|"-")DIGIT+)?;
terminal BOOLEANCONST returns ecore::EBoolean: ('true'|'false');

terminal RADIX: 'Ox' | 'Ob';

terminal ID: LETTER (LETTER | DIGIT | '_' | "'" )*;

terminal LETTER: ('a'..'z');
terminal CONID: UID;
terminal TYPEVAR: '$' ID;
/* terminal */ SIZEVAR: ID;
terminal UID: ULETTER ( LETTER | DIGIT | '_' | "'" )*;

terminal ULETTER: ('A'..'Z');
//terminal BINARYOPERATOR:
//	'+' | '-' | '*' | '/' | 'mod' | '+.' | '-.' | '*.' | '/.' | '<' | '>' | '<=' | '>=' | '=' |
//'!=' | '&&' | '||' | 'land' | 'lor' | 'lxor' '<<' | '>>'
//;
//terminal UNARYOPERATOR: '-' | '!';
terminal DIGIT: ('0'..'9');
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
//terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')? ;
terminal INCLUDE: '#include' !('\n'|'\r')* ('\r'? '\n')? ;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
