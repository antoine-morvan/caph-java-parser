grammar org.caph.parser.Caph hidden(WS, SL_COMMENT, INCLUDE)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate caph "http://www.caph.org/parser/Caph"

Model:
	declarations+=Declaration*;

Declaration: TypeDeclaration ';'
	| ValDeclaration ';'
	| IODeclaration ';'
	| ActorDeclaration ';'
	| NetDeclaration ';'
	| PragmaDeclaration
;



/* ****************************************************************
   **		TYPE Decls
   **************************************************************** */

TypeDeclaration: 'type';

/* ****************************************************************
   **		VAL Decls
   **************************************************************** */

ValDeclaration: 'val';

/* ****************************************************************
   **		IO Decls
   **************************************************************** */

IODeclaration: 'stream' ID ':' ObjectType ('from' | 'to') Device
//	| 'port' ID ':' Type ('from' Device)? 'init' SimpleNetExpression // XXX
//	| 'port' ID ':' Type 'to' Device // XXX
;


Device: STRING;

/* ****************************************************************
   **		ACTOR Decls
   **************************************************************** */

ActorDeclaration: 'actor' ID ActorInterface ActorBody;

ActorInterface: ('(' parameters=ActorParameters ')')? 'in' '(' ins=ActorPorts ')' 'out' '(' outs=ActorPorts ')';

ActorParameters: ActorParameter (',' ActorParameters)?;
ActorParameter: ID ':' ObjectType;

ActorPorts: ActorPort (',' ActorPorts)?;
ActorPort: ID ':' ObjectType;

ActorBody: (ActorVar)* 'rules' ActorRules;


ActorVar:'var' ID ':' VarType ('=' VarInit)?;

VarInit: ArrayInit
	| Expression
	| CONID
;

ActorRules: RuleSchema UnqualifiedRule+
	| QualifiedRuled+
;

RuleSchema:
	Qualifiers '->' Qualifiers
;

QualifiedRuled:
	ID //TODO
;

UnqualifiedRule: '|' UnqualifiedRuleLHS (RuleGuard)? '->' UnqualifiedRuleRHS;

Qualifiers: Qualifier | '(' Qualifier (','Qualifier )+')';

Qualifier:
	ID // TODO other
;

RuleGuard:
	ID // TODO
;

UnqualifiedRuleLHS: RulePattern | '(' RulePattern (',' RulePattern)+ ')';


RulePattern: SimpleRulePattern // TODO
	| CONID //SimpleRulePattern?
//	| CONID '(' SimpleRulePattern (',' SimpleRulePattern)* ')'
	| '\'>'
	| '\'<'
	| '\''SimpleRulePattern
;

SimpleRulePattern: VAR
	| ScalarConstant
	| '_'
;

UnqualifiedRuleRHS:  RuleExpression | '(' RuleExpression (',' RuleExpression)+ ')';

RuleExpression: Expression
	| CONID Expression?
	| CONID '(' Expression (',' Expression)* ')'
	| "'>"
	| "'<"
	| "'"Expression
	| '_'
;

/* ****************************************************************
   **		NET Decls
   **************************************************************** */

NetDeclaration: 'net' ('rec')? NetBindings;

NetBindings: bindings+=NetBinding ('and' bindings+=NetBinding)*;

NetBinding: NetPattern '=' NetExpression
//	| ID (NetPattern)+ '=' NetExpression
;

NetPattern: VAR
	| '(' NetPattern (',' NetPattern)*')'
;

NetExpressions: exprs+=NetExpression (',' exprs+=NetExpression)*;

NetExpression:
	SimpleNetExpression+
	//TODO
;

SimpleNetExpression: VAR
//	| '(' NetExpression ')'
//	| '(' SimpleNetExpression ':' ObjectType ')'
	| ParamValue
	// TODO
;

ParamValue: //VAR	|
	ScalarConstant |
	Array1Constant
;

/* ****************************************************************
   **		PRAGMA Decls
   **************************************************************** */

PragmaDeclaration: '#pragma' id=ID ('(' args+=ID (',' args+=ID)* ')')?;

/* ****************************************************************
   **		Expressions
   **************************************************************** */

Expression:ScalarConstant
	| VAR
;

ArrayInit:
	ArrayExt1 | ArrayExt2 | ArrayExt3 | '[' ArrayComprehension ']'
;

ArrayExt1:
	'[' Expression (',' Expression)* ']'
;

ArrayExt2:
	'[' ArrayExt1 (',' ArrayExt1)* ']'
;

ArrayExt3:
	'[' ArrayExt2 (',' ArrayExt2)* ']'
;

ArrayComprehension:
	'[' Expression | '|' IndexRange (',' IndexRange)* ']'
;

IndexRange: ID '=' ArrayIndex 'to' ArrayIndex;

ArrayIndex: Expression;

/* ****************************************************************
   **		CONSTANTS
   **************************************************************** */

ScalarConstant:
	INTCONST | BOOLEANCONST | FLOATCONST
;

Array1Constant:
	'[' ScalarConstant (',' ScalarConstant)* ']'
;

Array2Constant:
	'[' Array1Constant (',' Array1Constant)* ']'
;


/* ****************************************************************
   **		Type Expressions
   **************************************************************** */

ObjectType: Type;
Type: TypeProduct | TypeProduct '->' Type;

TypeProduct: NamedType ('*' NamedType)*;

NamedType: ArrayType (ID ('[' Size ']')?)?;

ArrayType: SimpleType ('array'  '[' Size ']'  ('[' Size ']')? )?;

SimpleType:
	'signed' '<' Size '>'
	| 'unsigned' '<' Size '>'
	| 'int' ('<' ( Sign ',')? Size '>')?
	| TYPEVAR
//	| '(' Type ')' // XXX
;

Sign: '_signed' | '_unsigned';

Size: INTCONST | SIZEVAR;

ArraySize: INTCONST;

VarType: ObjectType
	| '{' Ctors '}'
	| '{' IntRange '}'
;

Ctors:
	CONID (',' Ctors)?
;

IntRange: INTCONST ',..,' INTCONST;

/* ****************************************************************
   **		TERMINALS
   **************************************************************** */

/* terminal */ VAR: ID;
/* terminal */ ATTR: ID;

terminal INTCONST returns ecore::EInt: ('-')? DIGIT+;
terminal FIXINTCONST: (RADIX)? DIGIT+;
terminal FLOATCONST returns ecore::EFloat: ('-')? DIGIT+ ('.' DIGIT*)? (("e"|"E")("+"|"-")DIGIT+)?;
terminal BOOLEANCONST returns ecore::EBoolean: ('true'|'false');

terminal RADIX: 'Ox' | 'Ob';

terminal ID: LETTER (LETTER | DIGIT | '_' | "'" )*;

terminal LETTER: ('a'..'z');
terminal CONID: UID;
terminal TYPEVAR: '$' ID;
/* terminal */ SIZEVAR: ID;
terminal UID: ULETTER ( LETTER | DIGIT | '_' | "'" )*;

terminal ULETTER: ('A'..'Z');
//terminal BINARYOPERATOR:
//	'+' | '-' | '*' | '/' | 'mod' | '+.' | '-.' | '*.' | '/.' | '<' | '>' | '<=' | '>=' | '=' |
//'!=' | '&&' | '||' | 'land' | 'lor' | 'lxor' '<<' | '>>'
//;
//terminal UNARYOPERATOR: '-' | '!';
terminal DIGIT: ('0'..'9');
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
		;
//terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')? ;
terminal INCLUDE: '#include' !('\n'|'\r')* ('\r'? '\n')? ;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
